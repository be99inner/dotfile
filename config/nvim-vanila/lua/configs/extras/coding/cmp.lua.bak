-- -- Lsp configuration
-- require("mason").setup()
-- require("mason-lspconfig").setup({
--   ensure_installed = { "lua_ls", "ts_ls", "pyright", "rust_analyzer", "terraformls", "gopls" }, -- Add LSP servers you want to install by default
--   automatic_installation = true,
-- })
--
-- local cmp_nvim_lsp = require("cmp_nvim_lsp")
-- local lspconfig = require("lspconfig")
--
-- -- Update LSP capabilities with nvim-cmp's capabilities
-- local capabilities = cmp_nvim_lsp.default_capabilities()
--
-- -- Configure each server installed by Mason
-- require("mason-lspconfig").setup_handlers({
--   function(server_name)
--     lspconfig[server_name].setup({
--       capabilities = capabilities,
--     })
--   end,
-- })
--
-- -- CMP config
-- local cmp = require("cmp")
-- local luasnip = require("luasnip")
--
-- local cmp_kinds = {
--   Text = " ",
--   Method = " ",
--   Function = " ",
--   Constructor = " ",
--   Field = " ",
--   Variable = " ",
--   Class = " ",
--   Interface = " ",
--   Module = " ",
--   Property = " ",
--   Unit = " ",
--   Value = " ",
--   Enum = " ",
--   Keyword = " ",
--   Snippet = " ",
--   Color = " ",
--   File = " ",
--   Reference = " ",
--   Folder = " ",
--   EnumMember = " ",
--   Constant = " ",
--   Struct = " ",
--   Event = " ",
--   Operator = " ",
--   TypeParameter = " ",
-- }
--
-- require("luasnip.loaders.from_vscode").lazy_load()
--
-- cmp.setup({
--   snippet = {
--     expand = function(args)
--       luasnip.lsp_expand(args.body)
--     end,
--   },
--   formatting = {
--     format = function(_, vim_item)
--       vim_item.kind = (cmp_kinds[vim_item.kind] or "") .. vim_item.kind
--       return vim_item
--     end,
--   },
--   mapping = cmp.mapping.preset.insert({
--     ["<C-b>"] = cmp.mapping.scroll_docs(-4),
--     ["<C-f>"] = cmp.mapping.scroll_docs(4),
--     ["<C-Space>"] = cmp.mapping.complete(),
--     ["<C-y>"] = cmp.mapping.confirm({ select = true }),
--     ["<C-e>"] = cmp.mapping.abort(),
--     ["<CR>"] = cmp.mapping.confirm({ select = true }),
--     ["<Tab>"] = cmp.mapping(function(fallback)
--       if cmp.visible() then
--         cmp.select_next_item()
--       elseif luasnip.expand_or_jumpable() then
--         luasnip.expand_or_jump()
--       else
--         fallback()
--       end
--     end, { "i", "s" }),
--     ["<S-Tab>"] = cmp.mapping(function(fallback)
--       if cmp.visible() then
--         cmp.select_prev_item()
--       elseif luasnip.jumpable(-1) then
--         luasnip.jump(-1)
--       else
--         fallback()
--       end
--     end, { "i", "s" }),
--   }),
--
--   sources = {
--     { name = "nvim_lsp" },
--     { name = "nvim_lua" },
--     { name = "luasnip" },
--     { name = "buffer" },
--     { name = "path" },
--   },
--   confirm_opts = {
--     behavior = cmp.ConfirmBehavior.Replace,
--     select = false,
--   },
--   -- sources = cmp.config.sources({
--   --   { name = "nvim_lsp" },
--   --   { name = "nvim_lua" },
--   --   { name = "luasnip" },
--   --
--   -- }, {
--   --   { name = "path" },
--   --   { name = "buffer" },
--   -- }),
-- })
